// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dropbox/proto/build_tools/svclib/service.proto

package build_tools

import (
	context "context"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HealthCheck_Type int32

const (
	HealthCheck_UNKNOWN HealthCheck_Type = 0
	HealthCheck_COMMAND HealthCheck_Type = 1
	HealthCheck_HTTP    HealthCheck_Type = 5
)

var HealthCheck_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "COMMAND",
	5: "HTTP",
}

var HealthCheck_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"COMMAND": 1,
	"HTTP":    5,
}

func (x HealthCheck_Type) Enum() *HealthCheck_Type {
	p := new(HealthCheck_Type)
	*p = x
	return p
}

func (x HealthCheck_Type) String() string {
	return proto.EnumName(HealthCheck_Type_name, int32(x))
}

func (x *HealthCheck_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HealthCheck_Type_value, data, "HealthCheck_Type")
	if err != nil {
		return err
	}
	*x = HealthCheck_Type(value)
	return nil
}

func (HealthCheck_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{2, 0}
}

type Service_Type int32

const (
	Service_DAEMON Service_Type = 0
	Service_TASK   Service_Type = 1
)

var Service_Type_name = map[int32]string{
	0: "DAEMON",
	1: "TASK",
}

var Service_Type_value = map[string]int32{
	"DAEMON": 0,
	"TASK":   1,
}

func (x Service_Type) Enum() *Service_Type {
	p := new(Service_Type)
	*p = x
	return p
}

func (x Service_Type) String() string {
	return proto.EnumName(Service_Type_name, int32(x))
}

func (x *Service_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Service_Type_value, data, "Service_Type")
	if err != nil {
		return err
	}
	*x = Service_Type(value)
	return nil
}

func (Service_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{3, 0}
}

type StatusResp_StatusCode int32

const (
	StatusResp_STOPPED               StatusResp_StatusCode = 0
	StatusResp_ERROR                 StatusResp_StatusCode = 1
	StatusResp_STARTING              StatusResp_StatusCode = 2
	StatusResp_STARTED               StatusResp_StatusCode = 3
	StatusResp_WAITING_FOR_DEPENDENT StatusResp_StatusCode = 4
	StatusResp_COMPLETED             StatusResp_StatusCode = 5
	StatusResp_STOPPING              StatusResp_StatusCode = 6
)

var StatusResp_StatusCode_name = map[int32]string{
	0: "STOPPED",
	1: "ERROR",
	2: "STARTING",
	3: "STARTED",
	4: "WAITING_FOR_DEPENDENT",
	5: "COMPLETED",
	6: "STOPPING",
}

var StatusResp_StatusCode_value = map[string]int32{
	"STOPPED":               0,
	"ERROR":                 1,
	"STARTING":              2,
	"STARTED":               3,
	"WAITING_FOR_DEPENDENT": 4,
	"COMPLETED":             5,
	"STOPPING":              6,
}

func (x StatusResp_StatusCode) Enum() *StatusResp_StatusCode {
	p := new(StatusResp_StatusCode)
	*p = x
	return p
}

func (x StatusResp_StatusCode) String() string {
	return proto.EnumName(StatusResp_StatusCode_name, int32(x))
}

func (x *StatusResp_StatusCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatusResp_StatusCode_value, data, "StatusResp_StatusCode")
	if err != nil {
		return err
	}
	*x = StatusResp_StatusCode(value)
	return nil
}

func (StatusResp_StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{9, 0}
}

type StatusResp_FailureMessage_FailureType int32

const (
	StatusResp_FailureMessage_UNKNOWN   StatusResp_FailureMessage_FailureType = 0
	StatusResp_FailureMessage_HAS_RACES StatusResp_FailureMessage_FailureType = 1
)

var StatusResp_FailureMessage_FailureType_name = map[int32]string{
	0: "UNKNOWN",
	1: "HAS_RACES",
}

var StatusResp_FailureMessage_FailureType_value = map[string]int32{
	"UNKNOWN":   0,
	"HAS_RACES": 1,
}

func (x StatusResp_FailureMessage_FailureType) Enum() *StatusResp_FailureMessage_FailureType {
	p := new(StatusResp_FailureMessage_FailureType)
	*p = x
	return p
}

func (x StatusResp_FailureMessage_FailureType) String() string {
	return proto.EnumName(StatusResp_FailureMessage_FailureType_name, int32(x))
}

func (x *StatusResp_FailureMessage_FailureType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatusResp_FailureMessage_FailureType_value, data, "StatusResp_FailureMessage_FailureType")
	if err != nil {
		return err
	}
	*x = StatusResp_FailureMessage_FailureType(value)
	return nil
}

func (StatusResp_FailureMessage_FailureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{9, 0, 0}
}

type Command struct {
	Cmd                  *string                        `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	EnvVars              []*Command_EnvironmentVariable `protobuf:"bytes,2,rep,name=env_vars,json=envVars" json:"env_vars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{0}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCmd() string {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return ""
}

func (m *Command) GetEnvVars() []*Command_EnvironmentVariable {
	if m != nil {
		return m.EnvVars
	}
	return nil
}

type Command_EnvironmentVariable struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command_EnvironmentVariable) Reset()         { *m = Command_EnvironmentVariable{} }
func (m *Command_EnvironmentVariable) String() string { return proto.CompactTextString(m) }
func (*Command_EnvironmentVariable) ProtoMessage()    {}
func (*Command_EnvironmentVariable) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{0, 0}
}
func (m *Command_EnvironmentVariable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command_EnvironmentVariable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command_EnvironmentVariable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command_EnvironmentVariable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command_EnvironmentVariable.Merge(m, src)
}
func (m *Command_EnvironmentVariable) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Command_EnvironmentVariable) XXX_DiscardUnknown() {
	xxx_messageInfo_Command_EnvironmentVariable.DiscardUnknown(m)
}

var xxx_messageInfo_Command_EnvironmentVariable proto.InternalMessageInfo

func (m *Command_EnvironmentVariable) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Command_EnvironmentVariable) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type HttpHealthCheck struct {
	Url                  *string  `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpHealthCheck) Reset()         { *m = HttpHealthCheck{} }
func (m *HttpHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HttpHealthCheck) ProtoMessage()    {}
func (*HttpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{1}
}
func (m *HttpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpHealthCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpHealthCheck.Merge(m, src)
}
func (m *HttpHealthCheck) XXX_Size() int {
	return m.ProtoSize()
}
func (m *HttpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HttpHealthCheck proto.InternalMessageInfo

func (m *HttpHealthCheck) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

type HealthCheck struct {
	Type                 *HealthCheck_Type `protobuf:"varint,1,opt,name=type,enum=build_tools.HealthCheck_Type" json:"type,omitempty"`
	Cmd                  *Command          `protobuf:"bytes,2,opt,name=cmd" json:"cmd,omitempty"`
	HttpHealthCheck      *HttpHealthCheck  `protobuf:"bytes,6,opt,name=http_health_check,json=httpHealthCheck" json:"http_health_check,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{2}
}
func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(m, src)
}
func (m *HealthCheck) XXX_Size() int {
	return m.ProtoSize()
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

func (m *HealthCheck) GetType() HealthCheck_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return HealthCheck_UNKNOWN
}

func (m *HealthCheck) GetCmd() *Command {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *HealthCheck) GetHttpHealthCheck() *HttpHealthCheck {
	if m != nil {
		return m.HttpHealthCheck
	}
	return nil
}

type Service struct {
	// Unique service name
	ServiceName *string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// Full command line to be executed to launch service
	LaunchCmd *Command `protobuf:"bytes,2,opt,name=launch_cmd,json=launchCmd" json:"launch_cmd,omitempty"`
	// Shell command to execute for verifying the service is running. Command will be retried till
	// exit code of 0 is observed.
	HealthChecks []*HealthCheck `protobuf:"bytes,9,rep,name=health_checks,json=healthChecks" json:"health_checks,omitempty"`
	// List of service names of dependent services.
	Dependencies []string      `protobuf:"bytes,4,rep,name=dependencies" json:"dependencies,omitempty"`
	StopCmd      *Command      `protobuf:"bytes,7,opt,name=stop_cmd,json=stopCmd" json:"stop_cmd,omitempty"`
	Type         *Service_Type `protobuf:"varint,8,opt,name=type,enum=build_tools.Service_Type" json:"type,omitempty"`
	// Always print this service verbosely. Default false.
	Verbose *bool `protobuf:"varint,10,opt,name=verbose" json:"verbose,omitempty"`
	// Optional string identifying the owner of the service
	Owner *string `protobuf:"bytes,11,opt,name=owner" json:"owner,omitempty"`
	// deprecated fields
	HealthChecksDeprecated []*Command `protobuf:"bytes,3,rep,name=health_checks_deprecated,json=healthChecksDeprecated" json:"health_checks_deprecated,omitempty"`
	// files to watch for restart purposes
	VersionFiles         []string `protobuf:"bytes,12,rep,name=version_files,json=versionFiles" json:"version_files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{3}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Service.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *Service) GetLaunchCmd() *Command {
	if m != nil {
		return m.LaunchCmd
	}
	return nil
}

func (m *Service) GetHealthChecks() []*HealthCheck {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *Service) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Service) GetStopCmd() *Command {
	if m != nil {
		return m.StopCmd
	}
	return nil
}

func (m *Service) GetType() Service_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Service_DAEMON
}

func (m *Service) GetVerbose() bool {
	if m != nil && m.Verbose != nil {
		return *m.Verbose
	}
	return false
}

func (m *Service) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *Service) GetHealthChecksDeprecated() []*Command {
	if m != nil {
		return m.HealthChecksDeprecated
	}
	return nil
}

func (m *Service) GetVersionFiles() []string {
	if m != nil {
		return m.VersionFiles
	}
	return nil
}

type CreateBatchReq struct {
	Services             []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateBatchReq) Reset()         { *m = CreateBatchReq{} }
func (m *CreateBatchReq) String() string { return proto.CompactTextString(m) }
func (*CreateBatchReq) ProtoMessage()    {}
func (*CreateBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{4}
}
func (m *CreateBatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBatchReq.Merge(m, src)
}
func (m *CreateBatchReq) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CreateBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBatchReq proto.InternalMessageInfo

func (m *CreateBatchReq) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type RemoveBatchReq struct {
	ServiceNames         []string `protobuf:"bytes,1,rep,name=service_names,json=serviceNames" json:"service_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveBatchReq) Reset()         { *m = RemoveBatchReq{} }
func (m *RemoveBatchReq) String() string { return proto.CompactTextString(m) }
func (*RemoveBatchReq) ProtoMessage()    {}
func (*RemoveBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{5}
}
func (m *RemoveBatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveBatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBatchReq.Merge(m, src)
}
func (m *RemoveBatchReq) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RemoveBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBatchReq proto.InternalMessageInfo

func (m *RemoveBatchReq) GetServiceNames() []string {
	if m != nil {
		return m.ServiceNames
	}
	return nil
}

type StartReq struct {
	ServiceName          *string  `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	WaitForHealthy       *bool    `protobuf:"varint,2,opt,name=wait_for_healthy,json=waitForHealthy" json:"wait_for_healthy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartReq) Reset()         { *m = StartReq{} }
func (m *StartReq) String() string { return proto.CompactTextString(m) }
func (*StartReq) ProtoMessage()    {}
func (*StartReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{6}
}
func (m *StartReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartReq.Merge(m, src)
}
func (m *StartReq) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StartReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StartReq.DiscardUnknown(m)
}

var xxx_messageInfo_StartReq proto.InternalMessageInfo

func (m *StartReq) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *StartReq) GetWaitForHealthy() bool {
	if m != nil && m.WaitForHealthy != nil {
		return *m.WaitForHealthy
	}
	return false
}

// Stops a single service
type StopReq struct {
	ServiceName          *string  `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopReq) Reset()         { *m = StopReq{} }
func (m *StopReq) String() string { return proto.CompactTextString(m) }
func (*StopReq) ProtoMessage()    {}
func (*StopReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{7}
}
func (m *StopReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopReq.Merge(m, src)
}
func (m *StopReq) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StopReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StopReq.DiscardUnknown(m)
}

var xxx_messageInfo_StopReq proto.InternalMessageInfo

func (m *StopReq) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

type StatusReq struct {
	ServiceNames         []string `protobuf:"bytes,1,rep,name=service_names,json=serviceNames" json:"service_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusReq) Reset()         { *m = StatusReq{} }
func (m *StatusReq) String() string { return proto.CompactTextString(m) }
func (*StatusReq) ProtoMessage()    {}
func (*StatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{8}
}
func (m *StatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusReq.Merge(m, src)
}
func (m *StatusReq) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_StatusReq proto.InternalMessageInfo

func (m *StatusReq) GetServiceNames() []string {
	if m != nil {
		return m.ServiceNames
	}
	return nil
}

type StatusResp struct {
	SvcStatus            []*StatusResp_Status `protobuf:"bytes,1,rep,name=svc_status,json=svcStatus" json:"svc_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StatusResp) Reset()         { *m = StatusResp{} }
func (m *StatusResp) String() string { return proto.CompactTextString(m) }
func (*StatusResp) ProtoMessage()    {}
func (*StatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{9}
}
func (m *StatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResp.Merge(m, src)
}
func (m *StatusResp) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResp proto.InternalMessageInfo

func (m *StatusResp) GetSvcStatus() []*StatusResp_Status {
	if m != nil {
		return m.SvcStatus
	}
	return nil
}

type StatusResp_FailureMessage struct {
	Type                 *StatusResp_FailureMessage_FailureType `protobuf:"varint,1,opt,name=type,enum=build_tools.StatusResp_FailureMessage_FailureType" json:"type,omitempty"`
	Log                  *string                                `protobuf:"bytes,2,opt,name=log" json:"log,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *StatusResp_FailureMessage) Reset()         { *m = StatusResp_FailureMessage{} }
func (m *StatusResp_FailureMessage) String() string { return proto.CompactTextString(m) }
func (*StatusResp_FailureMessage) ProtoMessage()    {}
func (*StatusResp_FailureMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{9, 0}
}
func (m *StatusResp_FailureMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResp_FailureMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResp_FailureMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResp_FailureMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResp_FailureMessage.Merge(m, src)
}
func (m *StatusResp_FailureMessage) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StatusResp_FailureMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResp_FailureMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResp_FailureMessage proto.InternalMessageInfo

func (m *StatusResp_FailureMessage) GetType() StatusResp_FailureMessage_FailureType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return StatusResp_FailureMessage_UNKNOWN
}

func (m *StatusResp_FailureMessage) GetLog() string {
	if m != nil && m.Log != nil {
		return *m.Log
	}
	return ""
}

type StatusResp_Status struct {
	ServiceName          *string                    `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	StatusCode           *StatusResp_StatusCode     `protobuf:"varint,2,opt,name=status_code,json=statusCode,enum=build_tools.StatusResp_StatusCode" json:"status_code,omitempty"`
	NeedsRestart         *bool                      `protobuf:"varint,3,opt,name=needs_restart,json=needsRestart" json:"needs_restart,omitempty"`
	LogFile              *string                    `protobuf:"bytes,4,opt,name=log_file,json=logFile" json:"log_file,omitempty"`
	Type                 *Service_Type              `protobuf:"varint,5,opt,name=type,enum=build_tools.Service_Type" json:"type,omitempty"`
	StartDurationMs      *int64                     `protobuf:"varint,6,opt,name=start_duration_ms,json=startDurationMs" json:"start_duration_ms,omitempty"`
	Owner                *string                    `protobuf:"bytes,7,opt,name=owner" json:"owner,omitempty"`
	FailureMessage       *StatusResp_FailureMessage `protobuf:"bytes,8,opt,name=failure_message,json=failureMessage" json:"failure_message,omitempty"`
	Pid                  *int64                     `protobuf:"varint,9,opt,name=pid" json:"pid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *StatusResp_Status) Reset()         { *m = StatusResp_Status{} }
func (m *StatusResp_Status) String() string { return proto.CompactTextString(m) }
func (*StatusResp_Status) ProtoMessage()    {}
func (*StatusResp_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{9, 1}
}
func (m *StatusResp_Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResp_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResp_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResp_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResp_Status.Merge(m, src)
}
func (m *StatusResp_Status) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StatusResp_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResp_Status.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResp_Status proto.InternalMessageInfo

func (m *StatusResp_Status) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *StatusResp_Status) GetStatusCode() StatusResp_StatusCode {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return StatusResp_STOPPED
}

func (m *StatusResp_Status) GetNeedsRestart() bool {
	if m != nil && m.NeedsRestart != nil {
		return *m.NeedsRestart
	}
	return false
}

func (m *StatusResp_Status) GetLogFile() string {
	if m != nil && m.LogFile != nil {
		return *m.LogFile
	}
	return ""
}

func (m *StatusResp_Status) GetType() Service_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Service_DAEMON
}

func (m *StatusResp_Status) GetStartDurationMs() int64 {
	if m != nil && m.StartDurationMs != nil {
		return *m.StartDurationMs
	}
	return 0
}

func (m *StatusResp_Status) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *StatusResp_Status) GetFailureMessage() *StatusResp_FailureMessage {
	if m != nil {
		return m.FailureMessage
	}
	return nil
}

func (m *StatusResp_Status) GetPid() int64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

type DiagnosticsReq struct {
	ServiceNames         []string `protobuf:"bytes,1,rep,name=service_names,json=serviceNames" json:"service_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiagnosticsReq) Reset()         { *m = DiagnosticsReq{} }
func (m *DiagnosticsReq) String() string { return proto.CompactTextString(m) }
func (*DiagnosticsReq) ProtoMessage()    {}
func (*DiagnosticsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{10}
}
func (m *DiagnosticsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiagnosticsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiagnosticsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiagnosticsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticsReq.Merge(m, src)
}
func (m *DiagnosticsReq) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DiagnosticsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticsReq.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticsReq proto.InternalMessageInfo

func (m *DiagnosticsReq) GetServiceNames() []string {
	if m != nil {
		return m.ServiceNames
	}
	return nil
}

type DiagnosticsResp struct {
	SvcMetrics           []*DiagnosticsResp_Metrics `protobuf:"bytes,1,rep,name=svc_metrics,json=svcMetrics" json:"svc_metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DiagnosticsResp) Reset()         { *m = DiagnosticsResp{} }
func (m *DiagnosticsResp) String() string { return proto.CompactTextString(m) }
func (*DiagnosticsResp) ProtoMessage()    {}
func (*DiagnosticsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{11}
}
func (m *DiagnosticsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiagnosticsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiagnosticsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiagnosticsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticsResp.Merge(m, src)
}
func (m *DiagnosticsResp) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DiagnosticsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticsResp.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticsResp proto.InternalMessageInfo

func (m *DiagnosticsResp) GetSvcMetrics() []*DiagnosticsResp_Metrics {
	if m != nil {
		return m.SvcMetrics
	}
	return nil
}

type DiagnosticsResp_Metrics struct {
	ServiceName *string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	CpuTimeMs   *int64  `protobuf:"varint,2,opt,name=cpu_time_ms,json=cpuTimeMs" json:"cpu_time_ms,omitempty"`
	// this will give a current snapshot of the memory used by all descendent processes.
	// Currently, this is called only at the end of the test run (therefore, this might not
	// be max memory usage). We think that's fine since this is mostly for catching
	// regressions or quantifying impact of improvements.
	RssMb                *int64   `protobuf:"varint,3,opt,name=rss_mb,json=rssMb" json:"rss_mb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiagnosticsResp_Metrics) Reset()         { *m = DiagnosticsResp_Metrics{} }
func (m *DiagnosticsResp_Metrics) String() string { return proto.CompactTextString(m) }
func (*DiagnosticsResp_Metrics) ProtoMessage()    {}
func (*DiagnosticsResp_Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{11, 0}
}
func (m *DiagnosticsResp_Metrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiagnosticsResp_Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiagnosticsResp_Metrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiagnosticsResp_Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticsResp_Metrics.Merge(m, src)
}
func (m *DiagnosticsResp_Metrics) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DiagnosticsResp_Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticsResp_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticsResp_Metrics proto.InternalMessageInfo

func (m *DiagnosticsResp_Metrics) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *DiagnosticsResp_Metrics) GetCpuTimeMs() int64 {
	if m != nil && m.CpuTimeMs != nil {
		return *m.CpuTimeMs
	}
	return 0
}

func (m *DiagnosticsResp_Metrics) GetRssMb() int64 {
	if m != nil && m.RssMb != nil {
		return *m.RssMb
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{12}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type StopAllReq struct {
	// don't bother with graceful termination, focus on stopping as soon as possible.
	UnsafeFastKill       *bool    `protobuf:"varint,1,opt,name=unsafe_fast_kill,json=unsafeFastKill" json:"unsafe_fast_kill,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopAllReq) Reset()         { *m = StopAllReq{} }
func (m *StopAllReq) String() string { return proto.CompactTextString(m) }
func (*StopAllReq) ProtoMessage()    {}
func (*StopAllReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3366050f82ac52fc, []int{13}
}
func (m *StopAllReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopAllReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopAllReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopAllReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopAllReq.Merge(m, src)
}
func (m *StopAllReq) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StopAllReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StopAllReq.DiscardUnknown(m)
}

var xxx_messageInfo_StopAllReq proto.InternalMessageInfo

func (m *StopAllReq) GetUnsafeFastKill() bool {
	if m != nil && m.UnsafeFastKill != nil {
		return *m.UnsafeFastKill
	}
	return false
}

func init() {
	proto.RegisterEnum("build_tools.HealthCheck_Type", HealthCheck_Type_name, HealthCheck_Type_value)
	proto.RegisterEnum("build_tools.Service_Type", Service_Type_name, Service_Type_value)
	proto.RegisterEnum("build_tools.StatusResp_StatusCode", StatusResp_StatusCode_name, StatusResp_StatusCode_value)
	proto.RegisterEnum("build_tools.StatusResp_FailureMessage_FailureType", StatusResp_FailureMessage_FailureType_name, StatusResp_FailureMessage_FailureType_value)
	proto.RegisterType((*Command)(nil), "build_tools.Command")
	proto.RegisterType((*Command_EnvironmentVariable)(nil), "build_tools.Command.EnvironmentVariable")
	proto.RegisterType((*HttpHealthCheck)(nil), "build_tools.HttpHealthCheck")
	proto.RegisterType((*HealthCheck)(nil), "build_tools.HealthCheck")
	proto.RegisterType((*Service)(nil), "build_tools.Service")
	proto.RegisterType((*CreateBatchReq)(nil), "build_tools.CreateBatchReq")
	proto.RegisterType((*RemoveBatchReq)(nil), "build_tools.RemoveBatchReq")
	proto.RegisterType((*StartReq)(nil), "build_tools.StartReq")
	proto.RegisterType((*StopReq)(nil), "build_tools.StopReq")
	proto.RegisterType((*StatusReq)(nil), "build_tools.StatusReq")
	proto.RegisterType((*StatusResp)(nil), "build_tools.StatusResp")
	proto.RegisterType((*StatusResp_FailureMessage)(nil), "build_tools.StatusResp.FailureMessage")
	proto.RegisterType((*StatusResp_Status)(nil), "build_tools.StatusResp.Status")
	proto.RegisterType((*DiagnosticsReq)(nil), "build_tools.DiagnosticsReq")
	proto.RegisterType((*DiagnosticsResp)(nil), "build_tools.DiagnosticsResp")
	proto.RegisterType((*DiagnosticsResp_Metrics)(nil), "build_tools.DiagnosticsResp.Metrics")
	proto.RegisterType((*Empty)(nil), "build_tools.Empty")
	proto.RegisterType((*StopAllReq)(nil), "build_tools.StopAllReq")
}

func init() {
	proto.RegisterFile("dropbox/proto/build_tools/svclib/service.proto", fileDescriptor_3366050f82ac52fc)
}

var fileDescriptor_3366050f82ac52fc = []byte{
	// 1229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x92, 0xdb, 0x44,
	0x10, 0x8e, 0xd6, 0xf6, 0xca, 0x6e, 0x79, 0xbd, 0xca, 0x90, 0x1f, 0xc5, 0x84, 0xad, 0x45, 0x49,
	0xa5, 0x4c, 0x0a, 0xbc, 0xc1, 0x40, 0x0a, 0x0e, 0xa1, 0xca, 0xb1, 0xbd, 0x6c, 0x2a, 0xf8, 0xa7,
	0xc6, 0x26, 0x39, 0xaa, 0x64, 0x69, 0x76, 0xad, 0x5a, 0xfd, 0x45, 0x33, 0x56, 0xf0, 0x9d, 0x57,
	0xe0, 0x0c, 0x2f, 0xc0, 0x23, 0x70, 0xe7, 0xc8, 0x13, 0x50, 0x54, 0x72, 0xe0, 0x35, 0xa8, 0x99,
	0x91, 0x37, 0xd2, 0xe2, 0x2c, 0xbe, 0xcd, 0xb4, 0xba, 0x7b, 0xba, 0xbf, 0xef, 0xeb, 0x2e, 0x41,
	0xdb, 0x4d, 0xa2, 0x78, 0x1e, 0xfd, 0x78, 0x14, 0x27, 0x11, 0x8b, 0x8e, 0xe6, 0x4b, 0xcf, 0x77,
	0x2d, 0x16, 0x45, 0x3e, 0x3d, 0xa2, 0xa9, 0xe3, 0x7b, 0xf3, 0x23, 0x4a, 0x92, 0xd4, 0x73, 0x48,
	0x5b, 0x38, 0x20, 0x2d, 0xe7, 0x61, 0xfe, 0xa2, 0x80, 0xda, 0x8b, 0x82, 0xc0, 0x0e, 0x5d, 0xa4,
	0x43, 0xc9, 0x09, 0x5c, 0x43, 0x39, 0x54, 0x5a, 0x35, 0xcc, 0x8f, 0xa8, 0x07, 0x55, 0x12, 0xa6,
	0x56, 0x6a, 0x27, 0xd4, 0xd8, 0x39, 0x2c, 0xb5, 0xb4, 0x4e, 0xab, 0x9d, 0x8b, 0x6e, 0x67, 0x91,
	0xed, 0x41, 0x98, 0x7a, 0x49, 0x14, 0x06, 0x24, 0x64, 0x2f, 0xec, 0xc4, 0xb3, 0xe7, 0x3e, 0xc1,
	0x2a, 0x09, 0xd3, 0x17, 0x76, 0x42, 0x9b, 0x4f, 0xe0, 0x83, 0x0d, 0xdf, 0xf9, 0x6b, 0xe7, 0x64,
	0x65, 0x28, 0x87, 0x3b, 0xfc, 0xb5, 0x73, 0xb2, 0x42, 0x37, 0xa0, 0x92, 0xda, 0xfe, 0x92, 0x18,
	0x3b, 0xc2, 0x26, 0x2f, 0xe6, 0x3d, 0xd8, 0x3f, 0x61, 0x2c, 0x3e, 0x21, 0xb6, 0xcf, 0x16, 0xbd,
	0x05, 0x71, 0xce, 0x79, 0xe8, 0x32, 0xf1, 0xd7, 0x85, 0x2e, 0x13, 0xdf, 0xfc, 0x4b, 0x01, 0x2d,
	0xef, 0xf1, 0x39, 0x94, 0xd9, 0x2a, 0x26, 0xc2, 0xa5, 0xd1, 0xf9, 0xa8, 0x50, 0x74, 0xce, 0xaf,
	0x3d, 0x5b, 0xc5, 0x04, 0x0b, 0x57, 0xf4, 0x40, 0x76, 0xbf, 0x73, 0xa8, 0xb4, 0xb4, 0xce, 0x8d,
	0x4d, 0x6d, 0x4a, 0x4c, 0x4e, 0xe0, 0xfa, 0x82, 0xb1, 0xd8, 0x5a, 0x88, 0x34, 0x96, 0xc3, 0xf3,
	0x18, 0xbb, 0x22, 0xea, 0x6e, 0xf1, 0x9d, 0x62, 0xd5, 0x78, 0x7f, 0x51, 0x34, 0x98, 0x0f, 0xa1,
	0xcc, 0xdf, 0x47, 0x1a, 0xa8, 0x3f, 0x8c, 0x9e, 0x8f, 0xc6, 0x2f, 0x47, 0xfa, 0x35, 0x7e, 0xe9,
	0x8d, 0x87, 0xc3, 0xee, 0xa8, 0xaf, 0x2b, 0xa8, 0x0a, 0xe5, 0x93, 0xd9, 0x6c, 0xa2, 0x57, 0xcc,
	0x7f, 0x4a, 0xa0, 0x4e, 0x25, 0x8d, 0xe8, 0x63, 0xa8, 0x67, 0x8c, 0x5a, 0xa1, 0x1d, 0x90, 0x0c,
	0x07, 0x2d, 0xb3, 0x8d, 0xec, 0x80, 0xa0, 0x2f, 0x00, 0x7c, 0x7b, 0x19, 0x3a, 0x0b, 0xeb, 0xff,
	0x7a, 0xaa, 0x49, 0xbf, 0x5e, 0xe0, 0xa2, 0x27, 0xb0, 0x97, 0x6f, 0x8a, 0x1a, 0x35, 0x41, 0xb9,
	0xf1, 0x3e, 0xf4, 0x70, 0x7d, 0xf1, 0xee, 0x42, 0x91, 0x09, 0x75, 0x97, 0xc4, 0x24, 0x74, 0x49,
	0xe8, 0x78, 0x84, 0x1a, 0xe5, 0xc3, 0x52, 0xab, 0x86, 0x0b, 0x36, 0x74, 0x04, 0x55, 0xca, 0xa2,
	0x58, 0x54, 0xa5, 0x5e, 0x51, 0x95, 0xca, 0xbd, 0x78, 0x4d, 0x9f, 0x65, 0x44, 0x56, 0x05, 0x91,
	0x77, 0x0a, 0xce, 0x19, 0x1e, 0x79, 0x12, 0x0d, 0x50, 0x53, 0x92, 0xcc, 0x23, 0x4a, 0x0c, 0x38,
	0x54, 0x5a, 0x55, 0xbc, 0xbe, 0x72, 0x71, 0x45, 0xaf, 0x43, 0x92, 0x18, 0x9a, 0x40, 0x4b, 0x5e,
	0xd0, 0x08, 0x8c, 0x42, 0xcb, 0x96, 0x4b, 0xe2, 0x84, 0x38, 0x36, 0x23, 0xae, 0x51, 0x12, 0xdd,
	0x6f, 0xae, 0xef, 0x56, 0xbe, 0xf3, 0xfe, 0x45, 0x0c, 0xba, 0x07, 0x7b, 0x29, 0x49, 0xa8, 0x17,
	0x85, 0xd6, 0xa9, 0xe7, 0x13, 0x6a, 0xd4, 0x25, 0x08, 0x99, 0xf1, 0x98, 0xdb, 0xcc, 0xbb, 0x19,
	0xef, 0x00, 0xbb, 0xfd, 0xee, 0x60, 0x38, 0xe6, 0xb4, 0x57, 0xa1, 0x3c, 0xeb, 0x4e, 0x9f, 0xeb,
	0x8a, 0xf9, 0x14, 0x1a, 0xbd, 0x84, 0xd8, 0x8c, 0x3c, 0xb5, 0x99, 0xb3, 0xc0, 0xe4, 0x15, 0x7a,
	0x04, 0xd5, 0x8c, 0x5b, 0x6a, 0x28, 0x1b, 0x8a, 0xca, 0x70, 0xc0, 0x17, 0x5e, 0xe6, 0x57, 0xd0,
	0xc0, 0x24, 0x88, 0xd2, 0x77, 0x39, 0xee, 0xc1, 0x5e, 0x5e, 0x33, 0x32, 0x51, 0x0d, 0xd7, 0x73,
	0xa2, 0xa1, 0xe6, 0x4b, 0xa8, 0x4e, 0x99, 0x9d, 0x30, 0x1e, 0xb0, 0x85, 0xc8, 0x5a, 0xa0, 0xbf,
	0xb6, 0x3d, 0x66, 0x9d, 0x46, 0x49, 0x36, 0x0d, 0x2b, 0x21, 0xb5, 0x2a, 0x6e, 0x70, 0xfb, 0x71,
	0x94, 0x48, 0xb1, 0xac, 0xcc, 0x4f, 0x41, 0x9d, 0xb2, 0x28, 0xde, 0x2e, 0xaf, 0xf9, 0x08, 0x6a,
	0x53, 0x66, 0xb3, 0x25, 0xdd, 0xba, 0xf0, 0xb7, 0x15, 0x80, 0x75, 0x08, 0x8d, 0xd1, 0x13, 0x00,
	0x9a, 0x3a, 0x16, 0x15, 0x96, 0x0c, 0xb2, 0x83, 0x22, 0x64, 0x17, 0xce, 0xeb, 0x63, 0x8d, 0xa6,
	0x8e, 0x3c, 0x36, 0x7f, 0x56, 0xa0, 0x71, 0x6c, 0x7b, 0xfe, 0x32, 0x21, 0x43, 0x42, 0xa9, 0x7d,
	0x46, 0xd0, 0x71, 0x61, 0x9f, 0x74, 0xde, 0x97, 0xab, 0x18, 0xb5, 0xbe, 0xe6, 0xf4, 0xa9, 0x43,
	0xc9, 0x8f, 0xce, 0x04, 0x4a, 0x35, 0xcc, 0x8f, 0xe6, 0x27, 0xa0, 0xe5, 0xdc, 0x8a, 0xbb, 0x60,
	0x0f, 0x6a, 0x27, 0xdd, 0xa9, 0x85, 0xbb, 0xbd, 0xc1, 0x54, 0x57, 0x9a, 0x3f, 0x95, 0x60, 0x57,
	0x3e, 0xb6, 0x0d, 0x3b, 0x3d, 0xd0, 0x24, 0x00, 0x96, 0x13, 0xb9, 0x44, 0x3c, 0xd9, 0xe8, 0x98,
	0x57, 0xa3, 0xd0, 0x8b, 0x5c, 0x82, 0x81, 0x5e, 0x9c, 0x39, 0xfa, 0x21, 0x21, 0x2e, 0xb5, 0x12,
	0x42, 0xb9, 0x32, 0x8c, 0x92, 0xe0, 0xb7, 0x2e, 0x8c, 0x58, 0xda, 0xd0, 0x1d, 0xa8, 0xfa, 0xd1,
	0x99, 0x10, 0xbc, 0x51, 0x16, 0x85, 0xa8, 0x7e, 0x74, 0xc6, 0xb5, 0x7e, 0x31, 0xbe, 0x95, 0xed,
	0xc6, 0xf7, 0x21, 0x5c, 0x17, 0x29, 0x2d, 0x77, 0x99, 0xd8, 0x8c, 0x4f, 0x51, 0x40, 0xc5, 0x6e,
	0x2d, 0xe1, 0x7d, 0xf1, 0xa1, 0x9f, 0xd9, 0x87, 0xf4, 0xdd, 0x40, 0xab, 0xf9, 0x81, 0x1e, 0xc3,
	0xfe, 0xa9, 0x84, 0xd3, 0x0a, 0x24, 0x0b, 0x62, 0x75, 0x68, 0x9d, 0x07, 0xdb, 0x71, 0x86, 0x1b,
	0xa7, 0x45, 0xe6, 0x75, 0x28, 0xc5, 0x9e, 0x6b, 0xd4, 0x44, 0x11, 0xfc, 0x68, 0xbe, 0x5e, 0x6b,
	0x4d, 0x20, 0xa4, 0x81, 0x3a, 0x9d, 0x8d, 0x27, 0x93, 0x41, 0x5f, 0xbf, 0x86, 0x6a, 0x50, 0x19,
	0x60, 0x3c, 0xc6, 0xba, 0x82, 0xea, 0x50, 0x9d, 0xce, 0xba, 0x78, 0xf6, 0x6c, 0xf4, 0x9d, 0xbe,
	0x23, 0xbd, 0xba, 0x78, 0x36, 0xe8, 0xeb, 0x25, 0x74, 0x07, 0x6e, 0xbe, 0xec, 0x3e, 0xe3, 0x5f,
	0xac, 0xe3, 0x31, 0xb6, 0xfa, 0x83, 0xc9, 0x60, 0xd4, 0x1f, 0x8c, 0x66, 0x7a, 0x99, 0x33, 0xde,
	0x1b, 0x0f, 0x27, 0xdf, 0x0f, 0xb8, 0x67, 0x45, 0x26, 0x19, 0x4f, 0x26, 0x3c, 0xc9, 0x2e, 0x9f,
	0xea, 0xbe, 0x67, 0x9f, 0x85, 0x11, 0x65, 0x9e, 0xb3, 0xfd, 0x70, 0xfc, 0xae, 0xc0, 0x7e, 0x21,
	0x8e, 0xc6, 0x68, 0x00, 0x1a, 0x9f, 0x90, 0x80, 0xb0, 0xc4, 0x73, 0xd6, 0x23, 0x72, 0xbf, 0x00,
	0xd1, 0xa5, 0x90, 0xf6, 0x50, 0xfa, 0x62, 0x3e, 0x5a, 0xd9, 0xb9, 0xe9, 0x80, 0x9a, 0x1d, 0xb7,
	0x51, 0xe4, 0x01, 0x68, 0x4e, 0xbc, 0xb4, 0x98, 0x17, 0x10, 0xce, 0xeb, 0x8e, 0x80, 0xb4, 0xe6,
	0xc4, 0xcb, 0x99, 0x17, 0x90, 0x21, 0x45, 0x37, 0x61, 0x37, 0xa1, 0xd4, 0x0a, 0xe6, 0x42, 0x65,
	0x25, 0x5c, 0x49, 0x28, 0x1d, 0xce, 0x4d, 0x15, 0x2a, 0x83, 0x20, 0x66, 0x2b, 0xf3, 0x31, 0x07,
	0x3e, 0x8a, 0xbb, 0xbe, 0xcf, 0x7b, 0x6f, 0x81, 0xbe, 0x0c, 0xa9, 0x7d, 0x4a, 0xac, 0x53, 0x9b,
	0x32, 0xeb, 0xdc, 0xf3, 0xe5, 0x1f, 0x41, 0x15, 0x37, 0xa4, 0xfd, 0xd8, 0xa6, 0xec, 0xb9, 0xe7,
	0xfb, 0x9d, 0xdf, 0xf8, 0xdc, 0xa4, 0x4e, 0x8f, 0xf9, 0xe8, 0x5b, 0xd0, 0x72, 0xcb, 0x15, 0x7d,
	0x58, 0x5c, 0xee, 0x85, 0xb5, 0xdb, 0x44, 0x85, 0x8f, 0xa2, 0x04, 0x1e, 0x9f, 0x5b, 0xac, 0x97,
	0xe2, 0x8b, 0x2b, 0x77, 0x63, 0xfc, 0x97, 0x50, 0x11, 0x1b, 0x16, 0xdd, 0xbc, 0x2c, 0x47, 0xb1,
	0x75, 0x37, 0xc5, 0xb4, 0x14, 0xf4, 0x08, 0xca, 0xbc, 0x71, 0x74, 0x69, 0xed, 0xcb, 0x8d, 0xba,
	0xf1, 0x9d, 0xc7, 0x72, 0xe1, 0x76, 0x7d, 0x1f, 0xdd, 0xfe, 0x4f, 0x90, 0x04, 0x70, 0x63, 0xdc,
	0x37, 0x17, 0x1b, 0xe6, 0xd6, 0xc6, 0x79, 0x79, 0xd5, 0xbc, 0xfd, 0x9e, 0x39, 0x42, 0x27, 0xa0,
	0xe5, 0x24, 0x73, 0x09, 0x9a, 0xa2, 0x6e, 0x9b, 0x77, 0xaf, 0x52, 0xda, 0xd3, 0xaf, 0xff, 0x78,
	0x73, 0xa0, 0xfc, 0xf9, 0xe6, 0x40, 0xf9, 0xfb, 0xcd, 0xc1, 0xb5, 0x5f, 0xdf, 0x1e, 0x28, 0x70,
	0xdf, 0x89, 0x82, 0xf5, 0x6f, 0xae, 0xfc, 0x8b, 0x2d, 0x24, 0x90, 0xbf, 0xb9, 0x13, 0xe5, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x8c, 0x61, 0x0b, 0x0b, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SvcCtlClient is the client API for SvcCtl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SvcCtlClient interface {
	// Create multiple unstarted services.
	CreateBatch(ctx context.Context, in *CreateBatchReq, opts ...grpc.CallOption) (*Empty, error)
	// Stop (if necessary) and remove multiple services, not in any particular order.
	RemoveBatch(ctx context.Context, in *RemoveBatchReq, opts ...grpc.CallOption) (*Empty, error)
	// Start batch of created services. Attempting to start a running service
	// will be a no-op.
	Start(ctx context.Context, opts ...grpc.CallOption) (SvcCtl_StartClient, error)
	// Stop a service. Stopping an already stopped service is a no-op.
	Stop(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*Empty, error)
	// Stop all services in reversed dependency order.
	StopAll(ctx context.Context, in *StopAllReq, opts ...grpc.CallOption) (*Empty, error)
	// Get status of selected services (or all services if empty).
	Status(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResp, error)
	// Get detailed diagnostics, including metrics (like cpu time) of selected services (or all services if empty).
	// This call is expensive and can take close to 1s to execute for large service graphs, so use this sparingly
	Diagnostics(ctx context.Context, in *DiagnosticsReq, opts ...grpc.CallOption) (*DiagnosticsResp, error)
}

type svcCtlClient struct {
	cc *grpc.ClientConn
}

func NewSvcCtlClient(cc *grpc.ClientConn) SvcCtlClient {
	return &svcCtlClient{cc}
}

func (c *svcCtlClient) CreateBatch(ctx context.Context, in *CreateBatchReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/build_tools.SvcCtl/CreateBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcCtlClient) RemoveBatch(ctx context.Context, in *RemoveBatchReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/build_tools.SvcCtl/RemoveBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcCtlClient) Start(ctx context.Context, opts ...grpc.CallOption) (SvcCtl_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SvcCtl_serviceDesc.Streams[0], "/build_tools.SvcCtl/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &svcCtlStartClient{stream}
	return x, nil
}

type SvcCtl_StartClient interface {
	Send(*StartReq) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type svcCtlStartClient struct {
	grpc.ClientStream
}

func (x *svcCtlStartClient) Send(m *StartReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *svcCtlStartClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *svcCtlClient) Stop(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/build_tools.SvcCtl/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcCtlClient) StopAll(ctx context.Context, in *StopAllReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/build_tools.SvcCtl/StopAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcCtlClient) Status(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, "/build_tools.SvcCtl/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcCtlClient) Diagnostics(ctx context.Context, in *DiagnosticsReq, opts ...grpc.CallOption) (*DiagnosticsResp, error) {
	out := new(DiagnosticsResp)
	err := c.cc.Invoke(ctx, "/build_tools.SvcCtl/Diagnostics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SvcCtlServer is the server API for SvcCtl service.
type SvcCtlServer interface {
	// Create multiple unstarted services.
	CreateBatch(context.Context, *CreateBatchReq) (*Empty, error)
	// Stop (if necessary) and remove multiple services, not in any particular order.
	RemoveBatch(context.Context, *RemoveBatchReq) (*Empty, error)
	// Start batch of created services. Attempting to start a running service
	// will be a no-op.
	Start(SvcCtl_StartServer) error
	// Stop a service. Stopping an already stopped service is a no-op.
	Stop(context.Context, *StopReq) (*Empty, error)
	// Stop all services in reversed dependency order.
	StopAll(context.Context, *StopAllReq) (*Empty, error)
	// Get status of selected services (or all services if empty).
	Status(context.Context, *StatusReq) (*StatusResp, error)
	// Get detailed diagnostics, including metrics (like cpu time) of selected services (or all services if empty).
	// This call is expensive and can take close to 1s to execute for large service graphs, so use this sparingly
	Diagnostics(context.Context, *DiagnosticsReq) (*DiagnosticsResp, error)
}

// UnimplementedSvcCtlServer can be embedded to have forward compatible implementations.
type UnimplementedSvcCtlServer struct {
}

func (*UnimplementedSvcCtlServer) CreateBatch(ctx context.Context, req *CreateBatchReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatch not implemented")
}
func (*UnimplementedSvcCtlServer) RemoveBatch(ctx context.Context, req *RemoveBatchReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBatch not implemented")
}
func (*UnimplementedSvcCtlServer) Start(srv SvcCtl_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedSvcCtlServer) Stop(ctx context.Context, req *StopReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedSvcCtlServer) StopAll(ctx context.Context, req *StopAllReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAll not implemented")
}
func (*UnimplementedSvcCtlServer) Status(ctx context.Context, req *StatusReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedSvcCtlServer) Diagnostics(ctx context.Context, req *DiagnosticsReq) (*DiagnosticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Diagnostics not implemented")
}

func RegisterSvcCtlServer(s *grpc.Server, srv SvcCtlServer) {
	s.RegisterService(&_SvcCtl_serviceDesc, srv)
}

func _SvcCtl_CreateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcCtlServer).CreateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build_tools.SvcCtl/CreateBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcCtlServer).CreateBatch(ctx, req.(*CreateBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvcCtl_RemoveBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcCtlServer).RemoveBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build_tools.SvcCtl/RemoveBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcCtlServer).RemoveBatch(ctx, req.(*RemoveBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvcCtl_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SvcCtlServer).Start(&svcCtlStartServer{stream})
}

type SvcCtl_StartServer interface {
	SendAndClose(*Empty) error
	Recv() (*StartReq, error)
	grpc.ServerStream
}

type svcCtlStartServer struct {
	grpc.ServerStream
}

func (x *svcCtlStartServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *svcCtlStartServer) Recv() (*StartReq, error) {
	m := new(StartReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SvcCtl_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcCtlServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build_tools.SvcCtl/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcCtlServer).Stop(ctx, req.(*StopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvcCtl_StopAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcCtlServer).StopAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build_tools.SvcCtl/StopAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcCtlServer).StopAll(ctx, req.(*StopAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvcCtl_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcCtlServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build_tools.SvcCtl/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcCtlServer).Status(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvcCtl_Diagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnosticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcCtlServer).Diagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build_tools.SvcCtl/Diagnostics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcCtlServer).Diagnostics(ctx, req.(*DiagnosticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SvcCtl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "build_tools.SvcCtl",
	HandlerType: (*SvcCtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBatch",
			Handler:    _SvcCtl_CreateBatch_Handler,
		},
		{
			MethodName: "RemoveBatch",
			Handler:    _SvcCtl_RemoveBatch_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _SvcCtl_Stop_Handler,
		},
		{
			MethodName: "StopAll",
			Handler:    _SvcCtl_StopAll_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _SvcCtl_Status_Handler,
		},
		{
			MethodName: "Diagnostics",
			Handler:    _SvcCtl_Diagnostics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _SvcCtl_Start_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dropbox/proto/build_tools/svclib/service.proto",
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EnvVars) > 0 {
		for iNdEx := len(m.EnvVars) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnvVars[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Cmd != nil {
		i -= len(*m.Cmd)
		copy(dAtA[i:], *m.Cmd)
		i = encodeVarintService(dAtA, i, uint64(len(*m.Cmd)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Command_EnvironmentVariable) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command_EnvironmentVariable) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_EnvironmentVariable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	} else {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintService(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	} else {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintService(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Url != nil {
		i -= len(*m.Url)
		copy(dAtA[i:], *m.Url)
		i = encodeVarintService(dAtA, i, uint64(len(*m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Cmd != nil {
		{
			size, err := m.Cmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i = encodeVarintService(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VersionFiles) > 0 {
		for iNdEx := len(m.VersionFiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VersionFiles[iNdEx])
			copy(dAtA[i:], m.VersionFiles[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.VersionFiles[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintService(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Verbose != nil {
		i--
		if *m.Verbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.HealthChecks) > 0 {
		for iNdEx := len(m.HealthChecks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HealthChecks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Type != nil {
		i = encodeVarintService(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x40
	}
	if m.StopCmd != nil {
		{
			size, err := m.StopCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Dependencies) > 0 {
		for iNdEx := len(m.Dependencies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Dependencies[iNdEx])
			copy(dAtA[i:], m.Dependencies[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Dependencies[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.HealthChecksDeprecated) > 0 {
		for iNdEx := len(m.HealthChecksDeprecated) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HealthChecksDeprecated[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LaunchCmd != nil {
		{
			size, err := m.LaunchCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceName != nil {
		i -= len(*m.ServiceName)
		copy(dAtA[i:], *m.ServiceName)
		i = encodeVarintService(dAtA, i, uint64(len(*m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateBatchReq) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RemoveBatchReq) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveBatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveBatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceNames) > 0 {
		for iNdEx := len(m.ServiceNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceNames[iNdEx])
			copy(dAtA[i:], m.ServiceNames[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.ServiceNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StartReq) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WaitForHealthy != nil {
		i--
		if *m.WaitForHealthy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ServiceName != nil {
		i -= len(*m.ServiceName)
		copy(dAtA[i:], *m.ServiceName)
		i = encodeVarintService(dAtA, i, uint64(len(*m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StopReq) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServiceName != nil {
		i -= len(*m.ServiceName)
		copy(dAtA[i:], *m.ServiceName)
		i = encodeVarintService(dAtA, i, uint64(len(*m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusReq) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceNames) > 0 {
		for iNdEx := len(m.ServiceNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceNames[iNdEx])
			copy(dAtA[i:], m.ServiceNames[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.ServiceNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatusResp) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SvcStatus) > 0 {
		for iNdEx := len(m.SvcStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SvcStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatusResp_FailureMessage) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResp_FailureMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResp_FailureMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Log != nil {
		i -= len(*m.Log)
		copy(dAtA[i:], *m.Log)
		i = encodeVarintService(dAtA, i, uint64(len(*m.Log)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i = encodeVarintService(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusResp_Status) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResp_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResp_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pid != nil {
		i = encodeVarintService(dAtA, i, uint64(*m.Pid))
		i--
		dAtA[i] = 0x48
	}
	if m.FailureMessage != nil {
		{
			size, err := m.FailureMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintService(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0x3a
	}
	if m.StartDurationMs != nil {
		i = encodeVarintService(dAtA, i, uint64(*m.StartDurationMs))
		i--
		dAtA[i] = 0x30
	}
	if m.Type != nil {
		i = encodeVarintService(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.LogFile != nil {
		i -= len(*m.LogFile)
		copy(dAtA[i:], *m.LogFile)
		i = encodeVarintService(dAtA, i, uint64(len(*m.LogFile)))
		i--
		dAtA[i] = 0x22
	}
	if m.NeedsRestart != nil {
		i--
		if *m.NeedsRestart {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.StatusCode != nil {
		i = encodeVarintService(dAtA, i, uint64(*m.StatusCode))
		i--
		dAtA[i] = 0x10
	}
	if m.ServiceName != nil {
		i -= len(*m.ServiceName)
		copy(dAtA[i:], *m.ServiceName)
		i = encodeVarintService(dAtA, i, uint64(len(*m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiagnosticsReq) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiagnosticsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiagnosticsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceNames) > 0 {
		for iNdEx := len(m.ServiceNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceNames[iNdEx])
			copy(dAtA[i:], m.ServiceNames[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.ServiceNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DiagnosticsResp) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiagnosticsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiagnosticsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SvcMetrics) > 0 {
		for iNdEx := len(m.SvcMetrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SvcMetrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DiagnosticsResp_Metrics) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiagnosticsResp_Metrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiagnosticsResp_Metrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RssMb != nil {
		i = encodeVarintService(dAtA, i, uint64(*m.RssMb))
		i--
		dAtA[i] = 0x18
	}
	if m.CpuTimeMs != nil {
		i = encodeVarintService(dAtA, i, uint64(*m.CpuTimeMs))
		i--
		dAtA[i] = 0x10
	}
	if m.ServiceName != nil {
		i -= len(*m.ServiceName)
		copy(dAtA[i:], *m.ServiceName)
		i = encodeVarintService(dAtA, i, uint64(len(*m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *StopAllReq) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopAllReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopAllReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UnsafeFastKill != nil {
		i--
		if *m.UnsafeFastKill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Command) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != nil {
		l = len(*m.Cmd)
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.EnvVars) > 0 {
		for _, e := range m.EnvVars {
			l = e.ProtoSize()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command_EnvironmentVariable) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovService(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HttpHealthCheck) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Url != nil {
		l = len(*m.Url)
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HealthCheck) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovService(uint64(*m.Type))
	}
	if m.Cmd != nil {
		l = m.Cmd.ProtoSize()
		n += 1 + l + sovService(uint64(l))
	}
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.ProtoSize()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Service) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovService(uint64(l))
	}
	if m.LaunchCmd != nil {
		l = m.LaunchCmd.ProtoSize()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.HealthChecksDeprecated) > 0 {
		for _, e := range m.HealthChecksDeprecated {
			l = e.ProtoSize()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.Dependencies) > 0 {
		for _, s := range m.Dependencies {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.StopCmd != nil {
		l = m.StopCmd.ProtoSize()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovService(uint64(*m.Type))
	}
	if len(m.HealthChecks) > 0 {
		for _, e := range m.HealthChecks {
			l = e.ProtoSize()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Verbose != nil {
		n += 2
	}
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.VersionFiles) > 0 {
		for _, s := range m.VersionFiles {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBatchReq) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.ProtoSize()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveBatchReq) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceNames) > 0 {
		for _, s := range m.ServiceNames {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartReq) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovService(uint64(l))
	}
	if m.WaitForHealthy != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopReq) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusReq) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceNames) > 0 {
		for _, s := range m.ServiceNames {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResp) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SvcStatus) > 0 {
		for _, e := range m.SvcStatus {
			l = e.ProtoSize()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResp_FailureMessage) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovService(uint64(*m.Type))
	}
	if m.Log != nil {
		l = len(*m.Log)
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResp_Status) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovService(uint64(l))
	}
	if m.StatusCode != nil {
		n += 1 + sovService(uint64(*m.StatusCode))
	}
	if m.NeedsRestart != nil {
		n += 2
	}
	if m.LogFile != nil {
		l = len(*m.LogFile)
		n += 1 + l + sovService(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovService(uint64(*m.Type))
	}
	if m.StartDurationMs != nil {
		n += 1 + sovService(uint64(*m.StartDurationMs))
	}
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovService(uint64(l))
	}
	if m.FailureMessage != nil {
		l = m.FailureMessage.ProtoSize()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Pid != nil {
		n += 1 + sovService(uint64(*m.Pid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiagnosticsReq) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceNames) > 0 {
		for _, s := range m.ServiceNames {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiagnosticsResp) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SvcMetrics) > 0 {
		for _, e := range m.SvcMetrics {
			l = e.ProtoSize()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiagnosticsResp_Metrics) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovService(uint64(l))
	}
	if m.CpuTimeMs != nil {
		n += 1 + sovService(uint64(*m.CpuTimeMs))
	}
	if m.RssMb != nil {
		n += 1 + sovService(uint64(*m.RssMb))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Empty) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopAllReq) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsafeFastKill != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Cmd = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvVars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvVars = append(m.EnvVars, &Command_EnvironmentVariable{})
			if err := m.EnvVars[len(m.EnvVars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command_EnvironmentVariable) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentVariable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentVariable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Url = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v HealthCheck_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= HealthCheck_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cmd == nil {
				m.Cmd = &Command{}
			}
			if err := m.Cmd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpHealthCheck == nil {
				m.HttpHealthCheck = &HttpHealthCheck{}
			}
			if err := m.HttpHealthCheck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LaunchCmd == nil {
				m.LaunchCmd = &Command{}
			}
			if err := m.LaunchCmd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecksDeprecated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecksDeprecated = append(m.HealthChecksDeprecated, &Command{})
			if err := m.HealthChecksDeprecated[len(m.HealthChecksDeprecated)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependencies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dependencies = append(m.Dependencies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StopCmd == nil {
				m.StopCmd = &Command{}
			}
			if err := m.StopCmd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Service_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Service_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecks = append(m.HealthChecks, &HealthCheck{})
			if err := m.HealthChecks[len(m.HealthChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Verbose = &b
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionFiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionFiles = append(m.VersionFiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveBatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceNames = append(m.ServiceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitForHealthy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WaitForHealthy = &b
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceNames = append(m.ServiceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcStatus = append(m.SvcStatus, &StatusResp_Status{})
			if err := m.SvcStatus[len(m.SvcStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResp_FailureMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailureMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailureMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v StatusResp_FailureMessage_FailureType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StatusResp_FailureMessage_FailureType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Log = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResp_Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			var v StatusResp_StatusCode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StatusResp_StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusCode = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsRestart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NeedsRestart = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LogFile = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Service_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Service_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDurationMs", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartDurationMs = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailureMessage == nil {
				m.FailureMessage = &StatusResp_FailureMessage{}
			}
			if err := m.FailureMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiagnosticsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiagnosticsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiagnosticsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceNames = append(m.ServiceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiagnosticsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiagnosticsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiagnosticsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcMetrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcMetrics = append(m.SvcMetrics, &DiagnosticsResp_Metrics{})
			if err := m.SvcMetrics[len(m.SvcMetrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiagnosticsResp_Metrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTimeMs", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuTimeMs = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RssMb", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RssMb = &v
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsafeFastKill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UnsafeFastKill = &b
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
